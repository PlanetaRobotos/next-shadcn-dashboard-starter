//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class RoadmapsClient {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @return Success
   */
  getById(id: string): Promise<RoadmapModel> {
    let url_ = this.baseUrl + '/v1/roadmaps/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetById(_response);
    });
  }

  protected processGetById(response: Response): Promise<RoadmapModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = RoadmapModel.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<RoadmapModel>(null as any);
  }

  /**
   * @param body (optional)
   * @return No Content
   */
  update(id: string, body: RoadmapUpdateRequest | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/roadmaps/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdate(_response);
    });
  }

  protected processUpdate(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 204) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return No Content
   */
  delete(id: string): Promise<void> {
    let url_ = this.baseUrl + '/v1/roadmaps/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'DELETE',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDelete(_response);
    });
  }

  protected processDelete(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 204) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @param search (optional)
   * @param includeColumns (optional)
   * @param filters (optional)
   * @param sorts (optional)
   * @param page (optional)
   * @param pageSize (optional)
   * @return Success
   */
  filter(
    search: string | undefined,
    includeColumns: boolean | undefined,
    filters: string | undefined,
    sorts: string | undefined,
    page: number | undefined,
    pageSize: number | undefined
  ): Promise<RoadmapModelFiltered> {
    let url_ = this.baseUrl + '/v1/roadmaps?';
    if (search === null)
      throw new Error("The parameter 'search' cannot be null.");
    else if (search !== undefined)
      url_ += 'search=' + encodeURIComponent('' + search) + '&';
    if (includeColumns === null)
      throw new Error("The parameter 'includeColumns' cannot be null.");
    else if (includeColumns !== undefined)
      url_ += 'includeColumns=' + encodeURIComponent('' + includeColumns) + '&';
    if (filters === null)
      throw new Error("The parameter 'filters' cannot be null.");
    else if (filters !== undefined)
      url_ += 'filters=' + encodeURIComponent('' + filters) + '&';
    if (sorts === null)
      throw new Error("The parameter 'sorts' cannot be null.");
    else if (sorts !== undefined)
      url_ += 'sorts=' + encodeURIComponent('' + sorts) + '&';
    if (page === null) throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
      url_ += 'page=' + encodeURIComponent('' + page) + '&';
    if (pageSize === null)
      throw new Error("The parameter 'pageSize' cannot be null.");
    else if (pageSize !== undefined)
      url_ += 'pageSize=' + encodeURIComponent('' + pageSize) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processFilter(_response);
    });
  }

  protected processFilter(response: Response): Promise<RoadmapModelFiltered> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = RoadmapModelFiltered.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<RoadmapModelFiltered>(null as any);
  }

  /**
   * @param body (optional)
   * @return Created
   */
  create(body: RoadmapCreateRequest | undefined): Promise<RoadmapModel> {
    let url_ = this.baseUrl + '/v1/roadmaps';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processCreate(_response);
    });
  }

  protected processCreate(response: Response): Promise<RoadmapModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 201) {
      return response.text().then((_responseText) => {
        let result201: any = null;
        let resultData201 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = RoadmapModel.fromJS(resultData201);
        return result201;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<RoadmapModel>(null as any);
  }
}

export class ServerInfoClient {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @return Success
   */
  getInfo(): Promise<ServerInfoModel> {
    let url_ = this.baseUrl + '/v1/server-info';
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {
        Accept: 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetInfo(_response);
    });
  }

  protected processGetInfo(response: Response): Promise<ServerInfoModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ServerInfoModel.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<ServerInfoModel>(null as any);
  }
}

export class UsersClient {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? '';
  }

  get(id: number): Promise<void> {
    let url_ = this.baseUrl + '/v1/users/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'GET',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGet(_response);
    });
  }

  protected processGet(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  update(id: number, body: UserUpdateRequest | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/users/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdate(_response);
    });
  }

  protected processUpdate(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  delete(id: number): Promise<void> {
    let url_ = this.baseUrl + '/v1/users/{id}';
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace('{id}', encodeURIComponent('' + id));
    url_ = url_.replace(/[?&]$/, '');

    let options_: RequestInit = {
      method: 'DELETE',
      headers: {}
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDelete(_response);
    });
  }

  protected processDelete(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  create(body: UserCreateRequest | undefined): Promise<void> {
    let url_ = this.baseUrl + '/v1/users';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processCreate(_response);
    });
  }

  protected processCreate(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ErrorDto.fromJS(resultData400);
        return throwException(
          'Bad Request',
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 =
          _responseText === ''
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ErrorDto.fromJS(resultData401);
        return throwException(
          'Unauthorized',
          status,
          _responseText,
          _headers,
          result401
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }
}

export enum DifficultyLevel {
  None = 'None',
  Beginner = 'Beginner',
  Intermediate = 'Intermediate',
  Advanced = 'Advanced'
}

/** Record that represents a default HTTP error response. */
export class ErrorDto implements IErrorDto {
  status?: number;
  type?: string;
  message?: string;
  /** A set of additional errors. */
  errors?: { [key: string]: any } | undefined;

  constructor(data?: IErrorDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.status = _data['status'];
      this.type = _data['type'];
      this.message = _data['message'];
      if (_data['errors']) {
        this.errors = {} as any;
        for (let key in _data['errors']) {
          if (_data['errors'].hasOwnProperty(key))
            (<any>this.errors)![key] = _data['errors'][key];
        }
      }
    }
  }

  static fromJS(data: any): ErrorDto {
    data = typeof data === 'object' ? data : {};
    let result = new ErrorDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['status'] = this.status;
    data['type'] = this.type;
    data['message'] = this.message;
    if (this.errors) {
      data['errors'] = {};
      for (let key in this.errors) {
        if (this.errors.hasOwnProperty(key))
          (<any>data['errors'])[key] = (<any>this.errors)[key];
      }
    }
    return data;
  }
}

/** Record that represents a default HTTP error response. */
export interface IErrorDto {
  status?: number;
  type?: string;
  message?: string;
  /** A set of additional errors. */
  errors?: { [key: string]: any } | undefined;
}

export class PatchOperation implements IPatchOperation {
  op?: PatchOperationOp;
  path?: string;
  from?: string;
  value?: string;

  [key: string]: any;

  constructor(data?: IPatchOperation) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      for (var property in _data) {
        if (_data.hasOwnProperty(property)) this[property] = _data[property];
      }
      this.op = _data['op'];
      this.path = _data['path'];
      this.from = _data['from'];
      this.value = _data['value'];
    }
  }

  static fromJS(data: any): PatchOperation {
    data = typeof data === 'object' ? data : {};
    let result = new PatchOperation();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    for (var property in this) {
      if (this.hasOwnProperty(property)) data[property] = this[property];
    }
    data['op'] = this.op;
    data['path'] = this.path;
    data['from'] = this.from;
    data['value'] = this.value;
    return data;
  }
}

export interface IPatchOperation {
  op?: PatchOperationOp;
  path?: string;
  from?: string;
  value?: string;

  [key: string]: any;
}

export class RoadmapCreateRequest implements IRoadmapCreateRequest {
  title?: string;
  topic?: string;
  difficulty?: DifficultyLevel;
  estimatedDuration?: number;
  description?: string | undefined;
  tags?: string[] | undefined;

  constructor(data?: IRoadmapCreateRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.title = _data['title'];
      this.topic = _data['topic'];
      this.difficulty = _data['difficulty'];
      this.estimatedDuration = _data['estimatedDuration'];
      this.description = _data['description'];
      if (Array.isArray(_data['tags'])) {
        this.tags = [] as any;
        for (let item of _data['tags']) this.tags!.push(item);
      }
    }
  }

  static fromJS(data: any): RoadmapCreateRequest {
    data = typeof data === 'object' ? data : {};
    let result = new RoadmapCreateRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['title'] = this.title;
    data['topic'] = this.topic;
    data['difficulty'] = this.difficulty;
    data['estimatedDuration'] = this.estimatedDuration;
    data['description'] = this.description;
    if (Array.isArray(this.tags)) {
      data['tags'] = [];
      for (let item of this.tags) data['tags'].push(item);
    }
    return data;
  }
}

export interface IRoadmapCreateRequest {
  title?: string;
  topic?: string;
  difficulty?: DifficultyLevel;
  estimatedDuration?: number;
  description?: string | undefined;
  tags?: string[] | undefined;
}

export class RoadmapModel implements IRoadmapModel {
  title?: string;
  topic?: string;
  difficulty?: DifficultyLevel;
  estimatedDuration?: number;
  description?: string | undefined;
  tags?: string[] | undefined;
  id?: string;
  created?: Date;

  constructor(data?: IRoadmapModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.title = _data['title'];
      this.topic = _data['topic'];
      this.difficulty = _data['difficulty'];
      this.estimatedDuration = _data['estimatedDuration'];
      this.description = _data['description'];
      if (Array.isArray(_data['tags'])) {
        this.tags = [] as any;
        for (let item of _data['tags']) this.tags!.push(item);
      }
      this.id = _data['id'];
      this.created = _data['created']
        ? new Date(_data['created'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): RoadmapModel {
    data = typeof data === 'object' ? data : {};
    let result = new RoadmapModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['title'] = this.title;
    data['topic'] = this.topic;
    data['difficulty'] = this.difficulty;
    data['estimatedDuration'] = this.estimatedDuration;
    data['description'] = this.description;
    if (Array.isArray(this.tags)) {
      data['tags'] = [];
      for (let item of this.tags) data['tags'].push(item);
    }
    data['id'] = this.id;
    data['created'] = this.created
      ? this.created.toISOString()
      : <any>undefined;
    return data;
  }
}

export interface IRoadmapModel {
  title?: string;
  topic?: string;
  difficulty?: DifficultyLevel;
  estimatedDuration?: number;
  description?: string | undefined;
  tags?: string[] | undefined;
  id?: string;
  created?: Date;
}

export class RoadmapModelFiltered implements IRoadmapModelFiltered {
  data?: RoadmapModel[];
  total?: number;
  columns?: string[] | undefined;

  constructor(data?: IRoadmapModelFiltered) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['data'])) {
        this.data = [] as any;
        for (let item of _data['data'])
          this.data!.push(RoadmapModel.fromJS(item));
      }
      this.total = _data['total'];
      if (Array.isArray(_data['columns'])) {
        this.columns = [] as any;
        for (let item of _data['columns']) this.columns!.push(item);
      }
    }
  }

  static fromJS(data: any): RoadmapModelFiltered {
    data = typeof data === 'object' ? data : {};
    let result = new RoadmapModelFiltered();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.data)) {
      data['data'] = [];
      for (let item of this.data) data['data'].push(item.toJSON());
    }
    data['total'] = this.total;
    if (Array.isArray(this.columns)) {
      data['columns'] = [];
      for (let item of this.columns) data['columns'].push(item);
    }
    return data;
  }
}

export interface IRoadmapModelFiltered {
  data?: RoadmapModel[];
  total?: number;
  columns?: string[] | undefined;
}

export class RoadmapUpdateRequest implements IRoadmapUpdateRequest {
  title?: string;
  topic?: string;
  difficulty?: DifficultyLevel;
  estimatedDuration?: number;
  description?: string | undefined;
  tags?: string[] | undefined;
  zoneId?: string;

  constructor(data?: IRoadmapUpdateRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.title = _data['title'];
      this.topic = _data['topic'];
      this.difficulty = _data['difficulty'];
      this.estimatedDuration = _data['estimatedDuration'];
      this.description = _data['description'];
      if (Array.isArray(_data['tags'])) {
        this.tags = [] as any;
        for (let item of _data['tags']) this.tags!.push(item);
      }
      this.zoneId = _data['zoneId'];
    }
  }

  static fromJS(data: any): RoadmapUpdateRequest {
    data = typeof data === 'object' ? data : {};
    let result = new RoadmapUpdateRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['title'] = this.title;
    data['topic'] = this.topic;
    data['difficulty'] = this.difficulty;
    data['estimatedDuration'] = this.estimatedDuration;
    data['description'] = this.description;
    if (Array.isArray(this.tags)) {
      data['tags'] = [];
      for (let item of this.tags) data['tags'].push(item);
    }
    data['zoneId'] = this.zoneId;
    return data;
  }
}

export interface IRoadmapUpdateRequest {
  title?: string;
  topic?: string;
  difficulty?: DifficultyLevel;
  estimatedDuration?: number;
  description?: string | undefined;
  tags?: string[] | undefined;
  zoneId?: string;
}

export class ServerInfoModel implements IServerInfoModel {
  name?: string;
  apiVersion?: string;
  buildId?: string;

  constructor(data?: IServerInfoModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data['name'];
      this.apiVersion = _data['apiVersion'];
      this.buildId = _data['buildId'];
    }
  }

  static fromJS(data: any): ServerInfoModel {
    data = typeof data === 'object' ? data : {};
    let result = new ServerInfoModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['apiVersion'] = this.apiVersion;
    data['buildId'] = this.buildId;
    return data;
  }
}

export interface IServerInfoModel {
  name?: string;
  apiVersion?: string;
  buildId?: string;
}

export class UserCreateRequest implements IUserCreateRequest {
  userName?: string;
  firstName?: string;
  lastName?: string;
  email?: string;

  constructor(data?: IUserCreateRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userName = _data['userName'];
      this.firstName = _data['firstName'];
      this.lastName = _data['lastName'];
      this.email = _data['email'];
    }
  }

  static fromJS(data: any): UserCreateRequest {
    data = typeof data === 'object' ? data : {};
    let result = new UserCreateRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userName'] = this.userName;
    data['firstName'] = this.firstName;
    data['lastName'] = this.lastName;
    data['email'] = this.email;
    return data;
  }
}

export interface IUserCreateRequest {
  userName?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
}

export class UserUpdateRequest implements IUserUpdateRequest {
  userName?: string;
  firstName?: string;
  lastName?: string;
  email?: string;

  constructor(data?: IUserUpdateRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userName = _data['userName'];
      this.firstName = _data['firstName'];
      this.lastName = _data['lastName'];
      this.email = _data['email'];
    }
  }

  static fromJS(data: any): UserUpdateRequest {
    data = typeof data === 'object' ? data : {};
    let result = new UserUpdateRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userName'] = this.userName;
    data['firstName'] = this.firstName;
    data['lastName'] = this.lastName;
    data['email'] = this.email;
    return data;
  }
}

export interface IUserUpdateRequest {
  userName?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
}

export enum PatchOperationOp {
  Add = 'add',
  Copy = 'copy',
  Move = 'move',
  Remove = 'remove',
  Replace = 'replace',
  Test = 'test',
  Invalid = 'invalid'
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): any {
  if (result !== null && result !== undefined) throw result;
  else throw new ApiException(message, status, response, headers, null);
}
